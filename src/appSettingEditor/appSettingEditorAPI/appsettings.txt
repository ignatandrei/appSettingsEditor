//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:{{ RuntimeVersion }}
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Runtime.Serialization;
using Microsoft.Extensions.Configuration;
using appSettingsEditor;
namespace {{ NamespaceName }}
{
{{ for ClassModel in ClassModels }}
    //[global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("{{ ToolName }}", "{{ ToolVersion }}")]
    public partial class {{ ClassModel.ClassName }}: IAppSettingsConfig<{{ ClassModel.ClassName }}> 
    {
        public object GetFromPropertyName(string propName, bool returnNull =false){
            if(propName != null){
                propName=propName.ToUpper();
            
                switch(propName){
                    {{ for Property in ClassModel.Properties }}
                    case "{{ Property.PropertyName  | string.upcase }}":
                        return this.{{ Property.PropertyName }} ;
                {{ end }}
                }
            }
            if(returnNull)
                return null;

            throw new ArgumentException("cannot found from {{ ClassModel.ClassName }} prop "+propName);
        }

        public IEnumerable<string> Properties(){
            {{ for Property in ClassModel.Properties }}
                yield return "{{ Property.PropertyName }}" ;
            {{ end }}
        }
        {{ for Property in ClassModel.Properties }}
        [System.Text.Json.Serialization.JsonPropertyName("{{Property.PropertyNameOriginal}}")]
        public {{ Property.PropertyType }} {{ Property.PropertyName }} { get; set; }
        {{ end }}
        public  {{ ClassModel.ClassName }} LoadFromConfig(IConfiguration config)
        { 
            {{ if ClassModel.path.size > 0  }}
                config.GetSection("{{ ClassModel.path }}").Bind(this);
                return this;
            {{ else }}
                return config.Get<{{ ClassModel.ClassName }}>();
            {{ end }}
        }
    }
{{ end }}
}
